import Head from 'next/head'

import Layout from '@components/Layout';
import Header from '@components/Header';
import Container from '@components/Container';
import Button from '@components/Button';
import { buildImageUrl } from '@lib/cloudinary';
import styles from '@styles/Product.module.scss'
import {
  ApolloClient,
  InMemoryCache,
  ApolloProvider,
  useQuery,
  gql
} from "@apollo/client";
import client from '@lib/appolo_client';

export default function Product({ product }) {
  const {
    name,
    price,
    description,
    image,
    slug

  } = product;
  const img = buildImageUrl(image.public_id).toURL();
  return (
    <Layout>
      <Head>
        <title>{name}</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Container>
        <div className={styles.productWrapper}>
          <div className={styles.productImage}>
            <img width={image.width} height={image.height} src={img} alt="" />
          </div>
          <div className={styles.productContent}>
            <h1>{name}</h1>
            <div className={styles.productDescription}
              dangerouslySetInnerHTML={{ __html: description?.html }}
            />


            <p className={styles.productPrice}>
              ${price}
            </p>
            <p className={styles.productBuy}>
              <Button
                className={`snipcart-add-item`}
                data-item-id={slug}
                data-item-name={name}
                data-item-price={price}
                data-item-url={`/products/${slug}`}
                data-item-image={image.url}
              >
                Add to Cart
              </Button>
            </p>
          </div>
        </div>
      </Container>
    </Layout>
  )
}

export async function getStaticPaths({ locales }) {

  const client = new ApolloClient({
    uri: 'https://api-ap-south-1.graphcms.com/v2/cl40x354j2l2q01w69445fgea/master',
    cache: new InMemoryCache()
  });

  const data = await client.query({
    query: gql`
    query PageProducts {
   products {
    name
    price
    slug
    image 
 
  }
}

    `
  });




  const paths = data.data.products.map(product => ({
    params: {
      productSlug: product.slug

    }
  }))

  return {
    paths: [
      ...paths,
      ...paths.flatMap(path => {
        return locales.map(locale => {
          return {
            ...path,
            locale
          }
        })
      })
    ],
    fallback: false
  }
}


export async function getStaticProps({ params, locale }) {

  const data = await client.query({
    query: gql`

query PageProduct($slug: String, $locale: Locale!) {
  product(where: { slug: $slug }) {
    id
    image
    name
    price
          description {
      html
    }
    slug
    localizations(locales: [$locale]) {
            description {
        html
      }
      locale
    }
  }
}

    `,
    variables: {
      slug: params.productSlug,
      locale

    }
  });

  let product = data.data.product;


  if (product.localizations.length > 0) {

    product = {
      ...product,
      ...product.localizations[0]
    }

  }

  console.log(product);

  return {
    props: {
      product: product
    }
  }
}



//working
// query PageProduct($slug: String, $locale: Locale!) {
//   product(where: { slug: $slug }) {
//     id
//     image
//     name
//     price
//           description {
//       html
//     }
//     slug

//     localizations(locales: [$locale]) {
//             description {
//         html
//       }
//       locale
//     }
//   }
// }

//  query PageProduct($slug: String, $locale: Locale!) {
//   product(where: { slug: $slug }) {
//     image
//     name
//     price
//     id
//     slug
//     description {
//       html
//     }

//     localizations {
//       description {
//         html
//       }
//       locale
//       localizations(locales: [$locale]) {
//         id
//       }
//     }
//   }
// }
